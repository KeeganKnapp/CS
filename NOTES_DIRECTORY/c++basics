CPP BASICS

Programming Cycle:
	-Source Program: program written in human readable form
	-Compiler: applied to source program to translate it into form machine understands - we use Microsofts Visual C++ compiler 
			(part of Microsofts VS)
	-Compiler: produces object code- direct translation of source program - extension o.
	
Visual Studio:
	-MSVS is an integrated dev environment (IDE) for writing, debugging, testing, and running programs, supports multiple languages.
	-C++ is one of the supported languages
	-MSVS basic concepts
		-console application (cmd application, win32) - input/output

Subversion:
	-subversion: version control software (like git)
C++ Basics:
	-VARIABLES
		-variable is a named memory location
		-variable value is data stored in variables
			-variable always has a value
		-compiler removes variable name and assigns memory location
			-however, it is convenient to think that memory locations are labeled with variable names
		
		1001	y = 12.5
		1002	y = 12.5
		1003	y = 12.5
		1004	temperature = 32
		1005	temperature = 32
		1006	letter 'c' = 1
		1007	num = -
		1008	num = -

	-Identifiers
		-identifier: name of a variable or any other named symbol
		-identifier must start with a letter or underscore symbol (_), the rest of the characters should be letters, digits or underscores
		-legal identifiers:
			x	x1	x_1	_abc	sum	RateAverage
		-illegal, identifiers, why?
			13	3X	%change	data-1	my.identifier	a(3)
		-C++ is case sensitive:
			MyVar and myvar are different identifers
		
		-Identifier Style: careful selction of identifiers makes program more understandable
			-identifiers should be
				-short enough to be reasonable to type (single word is norm)
					-standard abbreviations are acceptable
				-long enough to be understandable
			-two styles of identifiers
				-Snake Case (C-style) - terse, use abbreviations and underscores to seperate the words, never use capital letters for
							variables
				-Camel Case - new word starts with capital, no space
					-can have first word capitalized or not
	-Key Words
		-identifiers reserved as part of language
			-ex. return, int, float, double
			-cannot be used by the programmer to name constructs
			-consists of lowercase letters only
			-have special meaning to compiler
	-Variable Declaration
		-before use, every variable in a C++ program needs to be declared
		-DECLARATION - introduction of the name to the comiler
		-type- the kind of data stored in a variable
		-variable declaration statement specifies:
			-type
			-name
		-declaration syntax: type id1, id2, id3;
		-two commonly used numeric types are:
			-int - whole positive or negative numbers:
			-double
		-ex.
			int numberOfBars;
			double weight, totalWeight;
	-Declaration Location, Initial Value
		-variable should be declared as close to its use as possible
		-variable contains ARBITRARY value after it is declared and until the variable is assigned
	-Assignment
		-syntax: variable = value;
		-assignment statement is an order to the computer to set the value of the variable on the left-hand side of equal sign to the value
		of the right-hand side
			-it looks like a math equation, but it is not
		-ex.
			numberOfBars = 37;
	
		- == means equal in cpp
		- = means assign in cpp

	-Stream
		-C++ uses streams for input output
		-stream - a sequence of data to be processed
			-input stream - data to be input into a program
			-output stream - data generated by the program to be outputted
		-to do input+output, insert
			#include <iostream>
			
		-OUTPUT: 
			-uses cout (console output)
			
				cout << numberOfBars;
				cout << "candy bars";
				cout << endl;
			-'<<' : insertion operator, inserts data into output stream
			-anything within double quotes will be output literally (no changes)
			-'endl' : tells computer to start hte output from the next line
			
			-several insertion operators can be stacked together in a single statement:
				
				cout << numberOfBars << "candy bars\n";
			
			-'\n' : serves same purpose as endl

			-arithmetic statements can be used with the output statement:

		-INPUT
			-'cin' - stream used to give variables user-input values
			-need to add the following to the beginning of your program
				using std::cin;
				cin >> number of bars >> oneWeight;
